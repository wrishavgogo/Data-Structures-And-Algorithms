You have done this problem  a lot of times in the past 


Basic idea is to simulate a sorted representation of the data stream 

[left side]     [right side]

dividing the sorted array in half 
lets say a new number comes 
            num 
[left side]   [right side] 
where do you insert it , left side or right side ? 

when you check with two elements leftSide.end() and rightSide.begin() 
if num is greater than rightSide.begin() and then push rightSide.begin() to the left side and push the num to rightSide 


Easier way to simulate this operation is by maintaining heaps for both the sides 
leftSide have a maxHeap -> to have the max element on top i.e leftSide.end() 
rightSide have a minHeap -> to have a min element on top i.e rightSide.begin() 



Follow up soln : 

1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?
We can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.
Time and space complexity would be O(100) = O(1).

2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?
this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].
