class Solution {
    public int maxEnvelopes(int[][] e) {
        
        int n = e.length;
        int m = e[0].length;
        Integer[][] x = new Integer[n][m];

        for(int i = 0 ; i < n ; i ++ ) {
            for(int j = 0 ; j < m ; j ++ ) {
                x[i][j] = e[i][j];
            }
        }

        Arrays.sort(x , (Integer[] a , Integer[] b) -> {
            if((int)a[0] == (int)b[0]) {
                return a[1] - b[1];
            }
            return a[0] - b[0];
        });

        

        

        int maxi = n;
        int[] ans = new int[n];
        ans[0] = 1;

        for(int i = 1 ; i < n ; i ++ ) {

            int lo = 0;
            int hi = i - 1;
            int posi = -1;
            while(lo <= hi ) {
                int mid = (lo + hi)/2;
                if(isSmaller(x[mid] , x[i])) {
                    posi = mid;
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }

            if(posi == -1 ) {
                ans[i] = 1;
            } else {
                ans[i] = ans[posi] + 1;
            }
            System.out.println(x[i][0] + "," + x[i][1] + " ---> " + ans[i] + " ---> " + posi);
            ans[i] = Math.max(ans[i] , ans[i - 1]);
        }

        return ans[n - 1];

    }

    boolean isSmaller(Integer[] a , Integer[] b) {

        return a[0] < b[0] && a[1] < b[1];
    }
}
