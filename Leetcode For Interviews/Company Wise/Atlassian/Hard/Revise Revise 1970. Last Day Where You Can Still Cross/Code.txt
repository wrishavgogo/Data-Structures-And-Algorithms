class Solution {

    class DSU {

        int[] parent;
        int[] sz;

        public DSU(int n) {
            parent = new int[n];
            sz = new int[n];
            Arrays.fill(sz , 1);
            for(int i = 0 ; i < n ; i ++ ) {
                parent[i] = i;
            }
        }

        public int root(int i){
            while(i != parent[i]) {
                parent[i] = parent[parent[i]];
                i = parent[i];
            }
            return i;
        }

        public void uni(int a , int b ) {

            int root_a = root(a);
            int root_b = root(b);
            if(sz[root_a] >= sz[root_b]) {
                sz[root_a] += sz[root_b];
                parent[root_b] = root_a;
            } else {
                sz[root_b] += sz[root_a];
                parent[root_a] = root_b;
            }
        }


    }
    public int latestDayToCross(int n, int m, int[][] cells) {
        
        int sz = n*m + 3;
        int left = n*m + 1;
        int right = n*m + 2;

        int[][] grid = new int[n][m];

        DSU dsu = new DSU(sz);
        int[][] directions = {{0 , 1} , {0 , -1} , {1 , 0} , {-1 , 0} ,
                              {1 , 1} , {-1 , -1}, {-1 , 1}, {1 , -1}};

        for(int i = 0 ; i < cells.length ; i ++ ) {

            int x = cells[i][0];
            int y = cells[i][1];
            x--;
            y--;
            grid[x][y] = 1;
            int id = x*m + y;

            if(y == 0 ) {
                // left most col 
                dsu.uni(id , left);
            }

            if(y == m - 1 ) {
                // right most col
                dsu.uni(id , right);
            }

            for(int[] dir : directions) {

                int newX = x + dir[0];
                int newY = y + dir[1];

                if(isValidCell(newX , newY , n , m ) && grid[newX][newY] == 1 ) {
                    int newId = newX*m + newY;
                    dsu.uni(id , newId);
                }
            }

            if(dsu.root(left) == dsu.root(right)) {
                return i;
            }

        }

        return cells.length;
    }

    public boolean isValidCell(int x , int y , int n , int m ) {
        return x >= 0 && x < n && y >= 0 && y < m;
    }
}
