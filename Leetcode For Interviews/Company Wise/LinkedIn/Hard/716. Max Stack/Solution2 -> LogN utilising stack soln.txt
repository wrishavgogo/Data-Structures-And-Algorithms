class MaxStack {

    class MaxHeapNode {
        // will create a heap , which will be ordered by value desc 
        // if value is same then timeof Insertion will be used 
        Node node;
        int timeOfInsertion;

        public MaxHeapNode(Node node , int timeOfInsertion) {
            this.node = node;
            this.timeOfInsertion = timeOfInsertion;
        }
    }

    class Node {
        // creating manual stack using doubly linkedList 
        Node prev;
        Node next;
        int val;

        public Node(int val) {
            this.val = val;
            prev = null;
            next = null;
        }
    }

    class CustomStack {

        Node head = null;

        
        public void push(Node node) {

            // pushing new node into the stack 
            if(head == null ) {
                // empty stack 
                head = node;
            } else {
                node.next = head;
                head.prev = node;
                head = node;
            }
        }

        public int pop() {

            if(head == null ) {
                return -1;
            }


            
            // extracting value
            int val = head.val;
            // getting next head
            Node nextHead = head.next;
            // detach current head's next from next node
            head.next = null;
            // make nextNode the head
            head = nextHead;
            
            // make the newHead previously next node's prev as null
            if(head != null ) {
                // for the case [5] -> null , pop() was called 
                // head becomes [5] so in that case be careful
                head.prev = null;
            }
            
            // return the value 
            return val;
        }

        public void removeNode(Node node) {
            // this is used when a random node is required to be removed from the stack
            // this can be head or tail or any node in between

            if(node == null  ) {
                return ;
            }
            // if node is equal to head then simple pop logic will take care 
            // no need to rewrite that code
            if(head == node ) {
                pop();
                return ;
            }

            // getting previous and next node 
            Node nextNode = node.next;
            Node prevNode = node.prev;

            // detaching node from the stack
            node.next = null;
            node.prev = null;

            // doing the chaining for them 
            if(prevNode != null ) {
                prevNode.next = nextNode;
            }
            if(nextNode != null ) {
                nextNode.prev = prevNode;
            }
        }

        public int top() {
            return head == null ? -1 : head.val;
        }

    }

    TreeMap< Integer , Stack<MaxHeapNode>> valToNodeStackMap ;
    /**
        the above map contains the value to stack of nodes which are in the custom stack 
        [2] -> node1 , node2 , node5
        [4] -> node3 , node6 , node7
        now these nodes will obviously inserted as they came , so max insertion time node will be on top
        the node which was inserted in the queue at the last will be at the top for each value
        for popMax -> we get the top node which was inserted at the last from the treeMap 
        and also remove it from the stack 
     */
    CustomStack customStack;
    int insertionTime = 0;

    public MaxStack() {
        
        // treeMap is sorted by keys 
        valToNodeStackMap = new TreeMap<>();
        customStack = new CustomStack();
    }
    
    public void push(int x) {
        // inserting into our normal stack 

        Node node = new Node(x);
        customStack.push(node);

        // incrementTime
        insertionTime++;

        // now inserting into the treeMap
        if(!valToNodeStackMap.containsKey(x)) {
            // first time x is getting inserted 
            valToNodeStackMap.put(x , new Stack<MaxHeapNode>());
        }

        // pushing it to the stack of the val = x
        // obviously the node with maximum insertionTime will be at the top 
        valToNodeStackMap.get(x).push(new MaxHeapNode(node, insertionTime));

    }
    
    public int pop() {
        
        // the value which needs to be popped 
        // obviously for a val that node of it will be popped which has the latest insertion time 
        // which is the top of the stack of val 
        int val = customStack.pop();

        // remove the topmost element for this map from its stack 
        valToNodeStackMap.get(val).pop();
        if(valToNodeStackMap.get(val).size() == 0 ) {
            // all entries of val are popped from the queue
            valToNodeStackMap.remove(val);
        }

        return val;
    }
    
    public int top() {
        return customStack.top();
    }
    
    public int peekMax() {
        
        return valToNodeStackMap.lastKey();
    }
    
    public int popMax() {

        int val = valToNodeStackMap.lastKey();
        // for this val get the node from the priority queue which needs to be removed from the stack

        // removing from priority queue
        MaxHeapNode maxHeapNode = valToNodeStackMap.get(val).pop();
        // removed from queue
        customStack.removeNode(maxHeapNode.node);

        // check if the priority queue is empty
        if(valToNodeStackMap.get(val).size() == 0 ) {
            // queue is empty remove the key 
            valToNodeStackMap.remove(val);
        }

        return val;
        
    }
}

/**
 * Your MaxStack object will be instantiated and called as such:
 * MaxStack obj = new MaxStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.peekMax();
 * int param_5 = obj.popMax();
 */
