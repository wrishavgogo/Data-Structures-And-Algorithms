class Solution {

    class DSU {

        int[] parent;
        int[] sz;

        public DSU(int len) {

            parent = new int[len];
            sz = new int[len];

            for(int i = 0 ; i < len ; i ++ ) {
                parent[i] = i;
                sz[i] = 1;
            }
        }

        int root(int i ) {

            while(i != parent[i]) {
                parent[i] = parent[parent[i]];
                i = parent[i];
            }

            return i;
        }

        int getSize(int x) {

            int root_x = root(x);
            return sz[root_x];
        }

        void uni(int a , int b ) {

            int root_a = root(a);
            int root_b = root(b);

            if(root_a == root_b) {
                return;
            }

            if(sz[root_a] >= sz[root_b]) {
                parent[root_b] = root_a;
                sz[root_a] += sz[root_b];
            } else {
                parent[root_a] = root_b;
                sz[root_b] += sz[root_a];
            }
        }

    }


    public int largestIsland(int[][] grid) {
        
        int n = grid.length;
        DSU dsu = new DSU(n * n);

        int[][] directions = {{0 , 1} , {0 , -1} , {1 , 0} , {-1 , 0}};
        int ans = 0;
        for(int i = 0 ; i < n ; i ++ ) {
            for(int j = 0 ; j < n ; j ++ ) {

                if(grid[i][j] == 1 ) {

                    int id = n*i + j;
                    for(int[] dir : directions ) {

                        int newX = i + dir[0];
                        int newY = j + dir[1];

                        if(!isValid(newX , newY , grid )) {
                            continue;
                        }

                        if(grid[newX][newY] == 1 ) {
                            int newId = n * newX + newY;
                            dsu.uni(id , newId);
                        }

                        
                    }

                    ans = Math.max(ans , dsu.getSize(id));

                    
                }
            }
        }

        

        for(int i = 0 ; i < n ; i ++ ) {

            for(int j = 0 ; j < n ; j ++ ) {

                if(grid[i][j] == 1) {
                    continue;
                }


                Set<Integer> st = new HashSet<>();
                int sum = 0;
                for(int[] dir : directions) {

                    int newX = i + dir[0];
                    int newY = j + dir[1];

                    if(!isValid(newX , newY , grid)) {
                        continue;
                    }

                    if(grid[newX][newY] != 1 ) {
                        continue;
                    }

                    int newId = newX * n + newY;

                    st.add(dsu.root(newId));
                }

                Iterator it = st.iterator();
                while(it.hasNext()) {
                    int r = (int)(it.next());
                    sum += dsu.getSize(r);
                }

                // add 1 to include the node itself 
                ans = Math.max(ans , sum + 1);
            }
        }


        return ans;
    }

    public boolean isValid(int i , int j , int[][] grid ) {

        int n = grid.length;
        return i >= 0 && i < n && j >= 0 && j < n ;
    }
}
