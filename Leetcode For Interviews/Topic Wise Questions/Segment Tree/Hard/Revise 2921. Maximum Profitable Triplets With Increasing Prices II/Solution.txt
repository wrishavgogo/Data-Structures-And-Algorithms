Go through explanation.pdf 

You found the solution yourself only , 
you just needed to see how to use the segment tree to from left and right and how to use the max segment tree

class Solution {

    class Node {
        int val;
        Node left , right;
    }

    class SparseSegmentTree {

        Node root;
        int L,R,def;

        public SparseSegmentTree(int L , int R , int def) {
            this.L = L;
            this.R = R;
            this.def = def;
            root = new Node();
        }

        private void update(Node node , int start , int end , int index , int val ) {

            if(start == end  ) {
                // we are at the leaf node
                node.val = Math.max(node.val , val);
                return;
            }

            int mid = start + (end - start ) / 2;
            if(index <= mid ) {
                if(node.left == null ) {
                    node.left = new Node();
                }
                update(node.left , start , mid , index , val);
            } else {
                if(node.right == null ) {
                    node.right = new Node();
                }
                update(node.right , mid + 1 , end , index , val);
            }

            int leftValue = node.left != null ? node.left.val : 0;
            int rightValue = node.right != null ? node.right.val : 0;
            node.val = Math.max(leftValue , rightValue);
        }

        public void updatePoint(int index , int val ) {
            update(root , L , R , index , val);
        }

        private int query(Node node , int start , int end , int l , int r ) {

            if(node == null || r < start || end < l ) {
                // node is null or out of range 
                return def;
            }
            if(l <= start && end <= r) {
                // node is completely within range
                return node.val;
            }

            int mid = start + (end - start ) / 2;
            int leftVal = query(node.left , start , mid , l , r);
            int rightVal = query(node.right , mid + 1 , end , l , r);
            return Math.max(leftVal , rightVal);
        }

        public int queryRange(int l , int r ) {
            return query(root , L , R , l , r);
        }

    }


    public int maxProfit(int[] prices, int[] profits) {
        
        int L = 0;
        int R = 5001; // we are going to have prices[i] as indexes
        
        SparseSegmentTree left = new SparseSegmentTree(L , R , -1);
        SparseSegmentTree right = new SparseSegmentTree(L , R , -1);
        int ans = -1;
        int n = prices.length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];
        // first going from left to right and trying to populate
        // max profits[i] in the i range
        for(int j = 0 ; j < n ; j ++ ) {
            leftMax[j] = left.queryRange(L , prices[j] - 1);
            left.updatePoint(prices[j] , profits[j]);
        }

        for(int j = n - 1 ; j >= 0 ; j -- ) {
            rightMax[j] = right.queryRange(prices[j] + 1 , R);
            right.updatePoint(prices[j] , profits[j]);
        }

        for(int j = 0 ; j < n ; j ++ ) {
            if(leftMax[j] != -1 && rightMax[j] != -1) {
                ans = Math.max(ans , leftMax[j] + profits[j] + rightMax[j]);
            }
        }
        return ans;
    }
}
